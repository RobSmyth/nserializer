#labels Migration
#sidebar SideBarTableOfContets
<wiki:toc max_depth="3" />
=Migration=
Product feature changes and code refactoring often change the data saved. New data may be added, the data structure may change, or types may change name. NSerializer is being extended to provide data migration to allow a product to maintain compatibility with files saved by prior version of the product.

Data migration is to allow an application to read a prior version's file and convert it to the current application objects. This is a work in progress, not all migration scenarios are supported.

==Supported Migration==

Currently NXmlSerializer supports migration with the following changes to application data types:

    * Namespace
    * Type name
    * New fields

Hopefully in future release:

    * Deleted fields
    * Field name
    * Split class
    * Merged classes (consolidation?)

Migration can be divided into either data movement (renaming, type splits/merging, deletion) or consolidation where data is processed to produce a new state. All of the above are the former.

==Type migration==

===Aliases===

Assigning an alias to a type means that a type's name and/or namespace can be changed without breaking file compatibility. This is because the serializer only serialized the alias and not the type's name.

Example:

{{{
rules.ForType<Foo>()
  .UseAlias("FooAlias");
}}}

If Foo is renamed then refactoring will rename the type in the rule. It is best to make the alias name different from the original type name so that refactoring tools, like Resharper, will not change the alias.

So after refactoring the rule will be:

{{{
rules.ForType<RenamedFoo>()
  .UseAlias("FooAlias");
}}}

===Name and/or namespace changed===

Simple refactoring or type name changes should not break compatibility so consider using an alias first. But if an alias was not used it is necessary to link the type to the old type name. 

====Example====

{{{
namespace Example
{
  class Foo
  {
    private int myField;
      :
  }
  }
}}}

Current version code:

{{{
namespace NSerializer.Example
{
  class Bar
  {
    private int myField;
      :
  }
}
}}}

Migration rules:

{{{
rules.ForType<NewFoo>()
  .MatchesTypeName("NSerializer.Example.Bar");
}}}

==Fields migration==

===New fields===

Currently supported. No configuration required. New fields with have null or default values.

====Example====

Prior (saved) version code:

{{{
class Foo
{
  private int myField;
    :
}
}}}

Current version code:

{{{
class Foo
{
  private int myField;
  private int myNewField;
    :
}
}}}

===Name changed===

Supported.

====Example====

Prior (saved) version code:

{{{
class Foo
{
  private int myField;
    :
}
}}}

Current version code:

{{{
class Foo
{
  private int myRenamedField;
    :
}
}}}

Migration rules:

{{{
rules.ForType<Foo>()
  .Field("myField").RenamedTo("myRenamedField");
}}}

=Links=
 * [http://en.wikipedia.org/wiki/Data_conversion Data conversion]
 * [http://en.wikipedia.org/wiki/Data_transformation Data transformation]