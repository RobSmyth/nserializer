#sidebar SideBarTableOfContets
=Migration=
Product feature changes and code refactoring often change the data saved. New data may be added, the data structure may change, or types may change name. NSerializer is being extended to provide data migration to allow a product to maintain compatibility with files saved by prior version of the product.

Data migration is to allow an application to read a prior version's file and convert it to the current application objects. This is a work in progress, not all migration scenarios are supported.

==Supported Migration==

Currently NXmlSerializer supports migration with the following changes to application data types:

    * Namespace
    * Type name
    * New fields

Hopefully in future release:

    * Deleted fields
    * Field name
    * Split class
    * Merged classes (consolidation?)

Migration can be divided into either data movement (renaming, type splits/merging, deletion) or consolidation where data is processed to produce a new state. All of the above are the former.

==Types of Migration==

===Changed type and/or namespace names===


===New fields===

Currently supported. No configuration required. New fields with have null or default values.

====Example====

Prior (saved) version code:

{{{
class Foo
{
  private int myField;
    :
}
}}}

Current version code:

{{{
class Foo
{
  private int myField;
  private int myNewField;
    :
}
}}}


===Changed field names===

Supported.

Prior (saved) version code:

====Example====

{{{
class Foo
{
  private int myField;
    :
}
}}}

Current version code:

{{{
class Foo
{
  private int myRenamedField;
    :
}
}}}

Migration rules:

{{{
rules.ForType<Foo>()
  .Field("myField").RenamedTo("myRenamedField");
}}}


===Type refactored to multiple types===

Not supported. Work in progress.

Issue to solve:

    * Resolve references to the correct type(s).
    * Redirect field values to new types.
    * Execute logic to initialise new types.


Approach being considered: Use type aliasing to provide a class that implements the original class's fields. Provide proxies for the new types. Reference mapping.

===Multiple types merged to another type===

Not supported. Work in progress.

For this migration to be possible will require either an implied association between the original types (scope) or an explicit relationship between the two original types (references).

Issue to solve:

    * Resolve scope.
    * Recognize relationship by references.


Probably an infrequent scenario so this will be a lower priority feature.

===Fields split/merged===

Now partially supported. Work in progress.

==Links==
 * [http://en.wikipedia.org/wiki/Data_conversion Data conversion]
 * [http://en.wikipedia.org/wiki/Data_transformation Data transformation]